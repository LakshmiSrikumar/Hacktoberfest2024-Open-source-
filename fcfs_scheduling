#include <iostream>
#include <vector>

using namespace std;

struct Process {
    int pid;        // Process ID
    int arrival;    // Arrival Time
    int burst;      // Burst Time
};

void FCFS(vector<Process> &processes) {
    int n = processes.size();
    vector<int> waiting_time(n), turnaround_time(n);

    // Calculate waiting time
    waiting_time[0] = 0;  // First process has no waiting time
    for (int i = 1; i < n; i++) {
        waiting_time[i] = waiting_time[i-1] + processes[i-1].burst;
    }

    // Calculate turnaround time
    for (int i = 0; i < n; i++) {
        turnaround_time[i] = processes[i].burst + waiting_time[i];
    }

    // Display results
    cout << "Process ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n";
    for (int i = 0; i < n; i++) {
        cout << processes[i].pid << "\t\t" << processes[i].arrival << "\t\t"
             << processes[i].burst << "\t\t" << waiting_time[i] << "\t\t"
             << turnaround_time[i] << "\n";
    }

    // Calculate and display average waiting and turnaround times
    double avg_waiting_time = 0, avg_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        avg_waiting_time += waiting_time[i];
        avg_turnaround_time += turnaround_time[i];
    }
    avg_waiting_time /= n;
    avg_turnaround_time /= n;

    cout << "\nAverage Waiting Time: " << avg_waiting_time << endl;
    cout << "Average Turnaround Time: " << avg_turnaround_time << endl;
}

int main() {
    vector<Process> processes = {{1, 0, 5}, {2, 1, 3}, {3, 2, 8}, {4, 3, 6}};

    FCFS(processes);

    return 0;
}
